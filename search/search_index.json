{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to Komodor \u00b6","title":"Welcome"},{"location":"index.html#welcome-to-komodor","text":"","title":"Welcome to Komodor"},{"location":"Annotations.html","text":"Komodor kubernetes annotations \u00b6 Komodor annotations (AKA Komodor as code), is a method to allow users to configure everything related to Komodor as part of their native k8s yaml. Komodor annotations should be placed in the deployment resource annotations (annotations set on the pod template are ignored) Notifications \u00b6 Configure the Slack channel notification as part of the deployment object. How \u00b6 annotation values description example default app.komodor.com/notification.deploy.slack string Slack channel name for all deploy events notifications \u201cdeploy-brain-team\" app.komodor.com/notification.deploy_fail.slack string Slack channel name for failed deploy events notifications \u201cdeploy-failed\" app.komodor.com/notification.deploy_success.slack string Slack channel name for successful deploy events notifications \u201cdeploy-success\" app.komodor.com/notification.health.slack string Slack channel for health event notifications \u201calerts-p1\u201d app.komodor.com/notification.health.delay_seconds string Duration for delaying notifications in case of an unhealthy state \u201c120\u201d \u201c30\u201d Service Links \u00b6 Define quick-links for a specific service, making it easier to get context when troubleshooting. How \u00b6 in the form of app.komodor.com/service/link/name:url Examples: annotation values description example default app.komodor.com/service.link.grafana-overall-system-health url Url for Grafana health dashboard related to this service. \u201cdeploy-brain-team\" app.komodor.com/service.link.datadog-http-500 url Url for datadog dashboard with bad http \u201calerts-p1\u201d app.komodor.com/service.link.company-playbook url The playbook for the company playbook \u201c120\u201d \u201c30\u201d CI-Deploy Links \u00b6 For each deployment version, you can add a quick link with the job url. How app.komodor.com/deploy/job/name:url Example: annotation values description Example default app.komodor.com/deploy.job.jenkins url Link to Jenkins job that deploys the service https://ci.jenkins-ci.org/computer/job Deploy Links \u00b6 For each deployment version, you can add a quick link with the relevant filters already in place! How app.komodor.com/deploy/link/name:value Examples: annotation values description Example app.komodor.com/deploy.link.logs url Link for the specific version logs https://app.logz.io/#/dashboard/kibana/discover?_a=env:123.0.1 app.komodor.com/deploy.link.sentry url Link for the specific version Sentry issues https://sentry.io/organizations/rookoutz/issues/?project=1320440&query=sdk.version%3A1.0.1&statsPeriod=14d Full example \u00b6 apiVersion : apps/v1 kind : Deployment metadata : name : annotation-example annotations : app.komodor.com/notification.deploy.slack : \"#deploy-slack-channel\" app.komodor.com/notification.alert.slack : \"#p1-health-issues\" app.komodor.com/service.link.grafana-overall-system-health : \"https://grafana.com/service/annoation-exmaple\" app.komodor.com/service.link.datadog : \"https://datadog.com/dashboard/annoation-exmaple\" app.komodor.com/service.link.playbook : \"https://docs.google.com/playbook\" app.komodor.com/deploy.job.jenkins : \"https://ci.jenkins-ci.org/computer/job\" app.komodor.com/deploy.link.logs : \"https://app.logz.io/#/dashboard/kibana/discover?_a=env:1.0.1\" app.komodor.com/deploy.link.sentry : \"https://sentry.io/organizations/rookoutz/issues/?project=1320440&query=sdk.version%3A1.0.1&statsPeriod=14d\" spec : selector : matchLabels : run : example replicas : 1 template : metadata : labels : run : example spec : containers : - name : hello-world image : gcr.io/google-samples/node-hello:1.0.1 ports : - containerPort : 8080 protocol : TCP Annotations Best Practices \u00b6 In Komodor we believe that k8s annotation is the best practice for describing service metadata. This includes all of the \u201cextra\u201d fields used to tag and label your service, both for other team members and for external tools. BTW, We collect the data both from annotations and labels. Where does Komodor utilize annotation? \u00b6 Everywhere, Komodor will use these annotation to create a powerful connections between services and enrich service information in all of the following: * Service explorer * Related services * Events screen * Match alerts to the right services Official kubernetes recommendation \u00b6 app.kubernetes.io/component : database app.kubernetes.io/part-of : wordpress app.kubernetes.io/managed-by : helm Komodor recommendation \u00b6 app.koomdor.com/label/team : backend app.koomdor.com/label/group : infrastructure app.koomdor.com/labe/owners : \"#infa-team\" app.koomdor.com/labe/alert-team : \"#devs\" app.koomdor.com/labe/Impacted-by : redis Usage example \u00b6 Tagging Team annotation on relevant services and adding relevant metadata on the alert metadata in datadog. Using the Team name in the alert tools (for example PD) as part of the komodor labels","title":"Annotations"},{"location":"Annotations.html#komodor-kubernetes-annotations","text":"Komodor annotations (AKA Komodor as code), is a method to allow users to configure everything related to Komodor as part of their native k8s yaml. Komodor annotations should be placed in the deployment resource annotations (annotations set on the pod template are ignored)","title":"Komodor kubernetes annotations"},{"location":"Annotations.html#notifications","text":"Configure the Slack channel notification as part of the deployment object.","title":"Notifications"},{"location":"Annotations.html#how","text":"annotation values description example default app.komodor.com/notification.deploy.slack string Slack channel name for all deploy events notifications \u201cdeploy-brain-team\" app.komodor.com/notification.deploy_fail.slack string Slack channel name for failed deploy events notifications \u201cdeploy-failed\" app.komodor.com/notification.deploy_success.slack string Slack channel name for successful deploy events notifications \u201cdeploy-success\" app.komodor.com/notification.health.slack string Slack channel for health event notifications \u201calerts-p1\u201d app.komodor.com/notification.health.delay_seconds string Duration for delaying notifications in case of an unhealthy state \u201c120\u201d \u201c30\u201d","title":"How"},{"location":"Annotations.html#service-links","text":"Define quick-links for a specific service, making it easier to get context when troubleshooting.","title":"Service Links"},{"location":"Annotations.html#how_1","text":"in the form of app.komodor.com/service/link/name:url Examples: annotation values description example default app.komodor.com/service.link.grafana-overall-system-health url Url for Grafana health dashboard related to this service. \u201cdeploy-brain-team\" app.komodor.com/service.link.datadog-http-500 url Url for datadog dashboard with bad http \u201calerts-p1\u201d app.komodor.com/service.link.company-playbook url The playbook for the company playbook \u201c120\u201d \u201c30\u201d","title":"How"},{"location":"Annotations.html#ci-deploy-links","text":"For each deployment version, you can add a quick link with the job url. How app.komodor.com/deploy/job/name:url Example: annotation values description Example default app.komodor.com/deploy.job.jenkins url Link to Jenkins job that deploys the service https://ci.jenkins-ci.org/computer/job","title":"CI-Deploy Links"},{"location":"Annotations.html#deploy-links","text":"For each deployment version, you can add a quick link with the relevant filters already in place! How app.komodor.com/deploy/link/name:value Examples: annotation values description Example app.komodor.com/deploy.link.logs url Link for the specific version logs https://app.logz.io/#/dashboard/kibana/discover?_a=env:123.0.1 app.komodor.com/deploy.link.sentry url Link for the specific version Sentry issues https://sentry.io/organizations/rookoutz/issues/?project=1320440&query=sdk.version%3A1.0.1&statsPeriod=14d","title":"Deploy Links"},{"location":"Annotations.html#full-example","text":"apiVersion : apps/v1 kind : Deployment metadata : name : annotation-example annotations : app.komodor.com/notification.deploy.slack : \"#deploy-slack-channel\" app.komodor.com/notification.alert.slack : \"#p1-health-issues\" app.komodor.com/service.link.grafana-overall-system-health : \"https://grafana.com/service/annoation-exmaple\" app.komodor.com/service.link.datadog : \"https://datadog.com/dashboard/annoation-exmaple\" app.komodor.com/service.link.playbook : \"https://docs.google.com/playbook\" app.komodor.com/deploy.job.jenkins : \"https://ci.jenkins-ci.org/computer/job\" app.komodor.com/deploy.link.logs : \"https://app.logz.io/#/dashboard/kibana/discover?_a=env:1.0.1\" app.komodor.com/deploy.link.sentry : \"https://sentry.io/organizations/rookoutz/issues/?project=1320440&query=sdk.version%3A1.0.1&statsPeriod=14d\" spec : selector : matchLabels : run : example replicas : 1 template : metadata : labels : run : example spec : containers : - name : hello-world image : gcr.io/google-samples/node-hello:1.0.1 ports : - containerPort : 8080 protocol : TCP","title":"Full example"},{"location":"Annotations.html#annotations-best-practices","text":"In Komodor we believe that k8s annotation is the best practice for describing service metadata. This includes all of the \u201cextra\u201d fields used to tag and label your service, both for other team members and for external tools. BTW, We collect the data both from annotations and labels.","title":"Annotations Best Practices"},{"location":"Annotations.html#where-does-komodor-utilize-annotation","text":"Everywhere, Komodor will use these annotation to create a powerful connections between services and enrich service information in all of the following: * Service explorer * Related services * Events screen * Match alerts to the right services","title":"Where does Komodor utilize annotation?"},{"location":"Annotations.html#official-kubernetes-recommendation","text":"app.kubernetes.io/component : database app.kubernetes.io/part-of : wordpress app.kubernetes.io/managed-by : helm","title":"Official kubernetes recommendation"},{"location":"Annotations.html#komodor-recommendation","text":"app.koomdor.com/label/team : backend app.koomdor.com/label/group : infrastructure app.koomdor.com/labe/owners : \"#infa-team\" app.koomdor.com/labe/alert-team : \"#devs\" app.koomdor.com/labe/Impacted-by : redis","title":"Komodor recommendation"},{"location":"Annotations.html#usage-example","text":"Tagging Team annotation on relevant services and adding relevant metadata on the alert metadata in datadog. Using the Team name in the alert tools (for example PD) as part of the komodor labels","title":"Usage example"},{"location":"Interaction-With-The-Cluster.html","text":"Interaction with the Cluster \u00b6 Interaction with the cluster allows you to speed up the troubleshooting process. This is done by asking Komodor's agent to perform actions in the cluster. Komodor does not run any actions that are not initiated by one of the users in the account Prerequisites \u00b6 Install Komodor's watcher (version >=0.1.44 ) with --set watcher.enableAgentTaskExecution=true to enable interaction with the Cluster. Upgrade \u00b6 helm upgrade --install k8s-watcher komodorio/k8s-watcher --set watcher.enableAgentTaskExecution = true --reuse-values Live Pods \u00b6 In the service, click on the Pod Status and Logs button. The table shows all the pods that belong to the service based on the pod owner controller. Actions \u00b6 Pod Logs \u00b6 Request logs from one of the pods will stream back the last 100 logs from the pod. When a pod was previously restarted by Kubernetes you can see the logs just before the pod was restarted. Pod Description \u00b6 Request returns the same output as kubectl describe pod [NAME]","title":"Interaction with the Cluster"},{"location":"Interaction-With-The-Cluster.html#interaction-with-the-cluster","text":"Interaction with the cluster allows you to speed up the troubleshooting process. This is done by asking Komodor's agent to perform actions in the cluster. Komodor does not run any actions that are not initiated by one of the users in the account","title":"Interaction with the Cluster"},{"location":"Interaction-With-The-Cluster.html#prerequisites","text":"Install Komodor's watcher (version >=0.1.44 ) with --set watcher.enableAgentTaskExecution=true to enable interaction with the Cluster.","title":"Prerequisites"},{"location":"Interaction-With-The-Cluster.html#upgrade","text":"helm upgrade --install k8s-watcher komodorio/k8s-watcher --set watcher.enableAgentTaskExecution = true --reuse-values","title":"Upgrade"},{"location":"Interaction-With-The-Cluster.html#live-pods","text":"In the service, click on the Pod Status and Logs button. The table shows all the pods that belong to the service based on the pod owner controller.","title":"Live Pods"},{"location":"Interaction-With-The-Cluster.html#actions","text":"","title":"Actions"},{"location":"Interaction-With-The-Cluster.html#pod-logs","text":"Request logs from one of the pods will stream back the last 100 logs from the pod. When a pod was previously restarted by Kubernetes you can see the logs just before the pod was restarted.","title":"Pod Logs"},{"location":"Interaction-With-The-Cluster.html#pod-description","text":"Request returns the same output as kubectl describe pod [NAME]","title":"Pod Description"},{"location":"Sensitive-Information-Redaction.html","text":"Sensitive data redaction in Komodor\u2019s k8s-watcher \u00b6 What is it \u00b6 It\u2019s likely that there are values you don\u2019t want to send to Komodor as plain text. Kubernetes Secrets, for instance, ConfigMap sensitive values or container environment variables. When configured - we will redact the specific value. That way Komodor won't see any sensitive data while you will still see configuration diff. How to integrate \u00b6 Inside komodor-k8s-watcher.yaml you should add a list of string or regular expressions under redact key as such: komodor-k8s-watcher watchNamespace : all namespacesBlacklist : - kube - system redact : - \"PG_.*\" - \".*PASSWORD.*\" nameBlacklist : [ \"leader\" , \"election\" ] collectHistory : false Secret Resource \u00b6 By default, Komodor\u2019s k8s-watcher is hashing all secrets values. ConfigMap resource \u00b6 You can preconfigure a list of keys for Kubernetes watcher to also redact specific values from ConfigMap. komodor-k8s-watcher.yaml: redact: - \"SENTRY_API_KEY\" - \"PG_.*\" configmap.yaml: apiVersion : v1 kind : ConfigMap metadata : Name : sensitive - config - map data : SENTRY_API_KEY : super_secret PG_SECRET : super_secret PG_USERNAME : super_secret All the above \u201csuper_secret\u201d will be sent has hashed value. Deployment resource \u00b6 Komodor\u2019s k8s-watcher will hash template.spec.template.[containeres|initContainers].env list of variables inside Deployment objects for pre-configured list of keys or list of regular expressions. komodor-k8s-watcher.yaml: redact: - \"SENTRY_API_KEY\" - \"PG_.*\" deployment.yaml: apiVersion : apps / v1 kind : Deployment metadata : name : sensitive - deployment spec : selector : matchLabels : run : example replicas : 1 template : metadata : labels : run : example spec : containers : - name : hello - world image : gcr . io /google-samples/ node - hello : 1.0 env : - name : PG_USERNAME value : super_secret - name : SECRET value : this_will_show_up In the above deployment example we will not send the secret values for PG_USERNAME. SECRET will show up as is due to the fact it won\u2019t match any string or regex in our configuration.","title":"Sensitive Information Redaction"},{"location":"Sensitive-Information-Redaction.html#sensitive-data-redaction-in-komodors-k8s-watcher","text":"","title":"Sensitive data redaction in Komodor\u2019s k8s-watcher"},{"location":"Sensitive-Information-Redaction.html#what-is-it","text":"It\u2019s likely that there are values you don\u2019t want to send to Komodor as plain text. Kubernetes Secrets, for instance, ConfigMap sensitive values or container environment variables. When configured - we will redact the specific value. That way Komodor won't see any sensitive data while you will still see configuration diff.","title":"What is it"},{"location":"Sensitive-Information-Redaction.html#how-to-integrate","text":"Inside komodor-k8s-watcher.yaml you should add a list of string or regular expressions under redact key as such: komodor-k8s-watcher watchNamespace : all namespacesBlacklist : - kube - system redact : - \"PG_.*\" - \".*PASSWORD.*\" nameBlacklist : [ \"leader\" , \"election\" ] collectHistory : false","title":"How to integrate"},{"location":"Sensitive-Information-Redaction.html#secret-resource","text":"By default, Komodor\u2019s k8s-watcher is hashing all secrets values.","title":"Secret Resource"},{"location":"Sensitive-Information-Redaction.html#configmap-resource","text":"You can preconfigure a list of keys for Kubernetes watcher to also redact specific values from ConfigMap. komodor-k8s-watcher.yaml: redact: - \"SENTRY_API_KEY\" - \"PG_.*\" configmap.yaml: apiVersion : v1 kind : ConfigMap metadata : Name : sensitive - config - map data : SENTRY_API_KEY : super_secret PG_SECRET : super_secret PG_USERNAME : super_secret All the above \u201csuper_secret\u201d will be sent has hashed value.","title":"ConfigMap resource"},{"location":"Sensitive-Information-Redaction.html#deployment-resource","text":"Komodor\u2019s k8s-watcher will hash template.spec.template.[containeres|initContainers].env list of variables inside Deployment objects for pre-configured list of keys or list of regular expressions. komodor-k8s-watcher.yaml: redact: - \"SENTRY_API_KEY\" - \"PG_.*\" deployment.yaml: apiVersion : apps / v1 kind : Deployment metadata : name : sensitive - deployment spec : selector : matchLabels : run : example replicas : 1 template : metadata : labels : run : example spec : containers : - name : hello - world image : gcr . io /google-samples/ node - hello : 1.0 env : - name : PG_USERNAME value : super_secret - name : SECRET value : this_will_show_up In the above deployment example we will not send the secret values for PG_USERNAME. SECRET will show up as is due to the fact it won\u2019t match any string or regex in our configuration.","title":"Deployment resource"},{"location":"config-changes.html","text":"Config Change API Integration \u00b6 Config change API allows users to send changes in their config (from internal tools and infrastructure), and see them as part of the Komodor Service view. How to use \u00b6 Request URL \u00b6 Mandatory query params will be used for service selection: * serviceName * namespace * clusterName Authentication \u00b6 To authenticate the request use API Key on your \"REST API\" integration tile in the Komodor app and add it to a header with X-API-KEY name. URL example : https://api.komodor.com/v0/event/config_change?serviceName=backend-service?namespace=default&clusterName=production\" Body \u00b6 This is the event itself with the relevant configuration you want to be connected to the service as JSON. { key1: value1, key2: value2\u2026 } Full Example \u00b6 curl H \"X-API-KEY: <rest api key>\" -H \"Content-Type: application/json\" -d '{\"key\":\"value\"}' 'https://api.komodor.com/v0/event/config_change?serviceName=backend-service?namespace=default&clusterName=production\"","title":"Config Changes"},{"location":"config-changes.html#config-change-api-integration","text":"Config change API allows users to send changes in their config (from internal tools and infrastructure), and see them as part of the Komodor Service view.","title":"Config Change API Integration"},{"location":"config-changes.html#how-to-use","text":"","title":"How to use"},{"location":"config-changes.html#request-url","text":"Mandatory query params will be used for service selection: * serviceName * namespace * clusterName","title":"Request URL"},{"location":"config-changes.html#authentication","text":"To authenticate the request use API Key on your \"REST API\" integration tile in the Komodor app and add it to a header with X-API-KEY name. URL example : https://api.komodor.com/v0/event/config_change?serviceName=backend-service?namespace=default&clusterName=production\"","title":"Authentication"},{"location":"config-changes.html#body","text":"This is the event itself with the relevant configuration you want to be connected to the service as JSON. { key1: value1, key2: value2\u2026 }","title":"Body"},{"location":"config-changes.html#full-example","text":"curl H \"X-API-KEY: <rest api key>\" -H \"Content-Type: application/json\" -d '{\"key\":\"value\"}' 'https://api.komodor.com/v0/event/config_change?serviceName=backend-service?namespace=default&clusterName=production\"","title":"Full Example"},{"location":"komodor-source-control.html","text":"Komodor source control support \u00b6 What is it \u00b6 Enrich services with relevant source control metadata. This allows to show smart-diffs as part of Komodor service changes tracking. Doing so connects the specific service with repositories that might not be the original codebase, such as infrastructure or CI repos, which are still relevant changes. How to integrate \u00b6 Add the following annotations to your service's Kubernetes spec: app.komodor.com/[name] : FULL_REPO_URL app.komodor.com/[name].ref : SOURCE_CONTROL_REF app.komodor.com/[another-name] : ANOTHER_FULL_REPO_URL app.komodor.com/[another-name].ref : ANOTHER_ SOURCE_CONTROL_REF Full example \u00b6 apiVersion : apps/v1 kind : Deployment metadata : name : git-example annotations : app.komodor.com/app : https://github.com/komodorio/infra app.komodor.com/app.ref : 3350e3311f9520fe5e237e2d71f339029ee051d8 app.komodor.com/infra : https://github.com/komodorio/helm-charts app.komodor.com/infra.ref : 32b355df32713afc511528d909eff296e91dbe74 spec : selector : matchLabels : run : example replicas : 1 template : metadata : labels : run : example spec : containers : - name : hello-world image : gcr.io/google-samples/node-hello:1.0 ports : - containerPort : 8080 protocol : TCP Tracked Files \u00b6 Once the integration with Github is established, Komodor will scan the pull requests files (only the names), to see if there are common, interesting files that have been updated. For example, when there was a change in Dockerfile , Komodor will show that in the Deploy summary. To customize which files will be tracked by Komodor. Using Kubernetes annotation app.komodor.com/tracked_files that accepts multiline string (gitignore like) to specify the files. For example, track any yaml files: apiVersion : apps/v1 kind : Deployment metadata : name : git-example annotations : app.komodor.com/tracked_files : | *.yaml app.komodor.com/app : https://github.com/komodorio/infra app.komodor.com/app.ref : 3350e3311f9520fe5e237e2d71f339029ee051d8 app.komodor.com/infra : https://github.com/komodorio/helm-charts app.komodor.com/infra.ref : 32b355df32713afc511528d909eff296e91dbe74 spec : selector : matchLabels : run : example replicas : 1 template : metadata : labels : run : example spec : containers : - name : hello-world image : gcr.io/google-samples/node-hello:1.0 ports : - containerPort : 8080 protocol : TCP\"","title":"Source Control"},{"location":"komodor-source-control.html#komodor-source-control-support","text":"","title":"Komodor source control support"},{"location":"komodor-source-control.html#what-is-it","text":"Enrich services with relevant source control metadata. This allows to show smart-diffs as part of Komodor service changes tracking. Doing so connects the specific service with repositories that might not be the original codebase, such as infrastructure or CI repos, which are still relevant changes.","title":"What is it"},{"location":"komodor-source-control.html#how-to-integrate","text":"Add the following annotations to your service's Kubernetes spec: app.komodor.com/[name] : FULL_REPO_URL app.komodor.com/[name].ref : SOURCE_CONTROL_REF app.komodor.com/[another-name] : ANOTHER_FULL_REPO_URL app.komodor.com/[another-name].ref : ANOTHER_ SOURCE_CONTROL_REF","title":"How to integrate"},{"location":"komodor-source-control.html#full-example","text":"apiVersion : apps/v1 kind : Deployment metadata : name : git-example annotations : app.komodor.com/app : https://github.com/komodorio/infra app.komodor.com/app.ref : 3350e3311f9520fe5e237e2d71f339029ee051d8 app.komodor.com/infra : https://github.com/komodorio/helm-charts app.komodor.com/infra.ref : 32b355df32713afc511528d909eff296e91dbe74 spec : selector : matchLabels : run : example replicas : 1 template : metadata : labels : run : example spec : containers : - name : hello-world image : gcr.io/google-samples/node-hello:1.0 ports : - containerPort : 8080 protocol : TCP","title":"Full example"},{"location":"komodor-source-control.html#tracked-files","text":"Once the integration with Github is established, Komodor will scan the pull requests files (only the names), to see if there are common, interesting files that have been updated. For example, when there was a change in Dockerfile , Komodor will show that in the Deploy summary. To customize which files will be tracked by Komodor. Using Kubernetes annotation app.komodor.com/tracked_files that accepts multiline string (gitignore like) to specify the files. For example, track any yaml files: apiVersion : apps/v1 kind : Deployment metadata : name : git-example annotations : app.komodor.com/tracked_files : | *.yaml app.komodor.com/app : https://github.com/komodorio/infra app.komodor.com/app.ref : 3350e3311f9520fe5e237e2d71f339029ee051d8 app.komodor.com/infra : https://github.com/komodorio/helm-charts app.komodor.com/infra.ref : 32b355df32713afc511528d909eff296e91dbe74 spec : selector : matchLabels : run : example replicas : 1 template : metadata : labels : run : example spec : containers : - name : hello-world image : gcr.io/google-samples/node-hello:1.0 ports : - containerPort : 8080 protocol : TCP\"","title":"Tracked Files"},{"location":"Integrations/Datadog.html","text":"Datadog Integration \u00b6 Komodor-Datadog integration allows you to see service connections on Komodor. Services that are detected as related by Datadog will be added to the Related Services section in the Komodor Service View. Installation \u00b6 Prerequisites \u00b6 In order for us to connect your services according to Datadog tracing, the following environment variables should exist on your k8s deployments: - DD_ENV should match the environment specified on the Datadog service - DD_SERVICE should match the service name specified on the Datadog service Installation Steps \u00b6 Make sure the prerequisites above are met. Locate the Datadog installation tile on Komodor Integration Settings . Press Install . Follow instructions on the screen. Confirmation \u00b6 A Datadog Integration tile will be added to the top section of labeled Installed Integrations . Your services that interact with each other should appear under the Related Services section in the Komodor service page.","title":"Datadog"},{"location":"Integrations/Datadog.html#datadog-integration","text":"Komodor-Datadog integration allows you to see service connections on Komodor. Services that are detected as related by Datadog will be added to the Related Services section in the Komodor Service View.","title":"Datadog Integration"},{"location":"Integrations/Datadog.html#installation","text":"","title":"Installation"},{"location":"Integrations/Datadog.html#prerequisites","text":"In order for us to connect your services according to Datadog tracing, the following environment variables should exist on your k8s deployments: - DD_ENV should match the environment specified on the Datadog service - DD_SERVICE should match the service name specified on the Datadog service","title":"Prerequisites"},{"location":"Integrations/Datadog.html#installation-steps","text":"Make sure the prerequisites above are met. Locate the Datadog installation tile on Komodor Integration Settings . Press Install . Follow instructions on the screen.","title":"Installation Steps"},{"location":"Integrations/Datadog.html#confirmation","text":"A Datadog Integration tile will be added to the top section of labeled Installed Integrations . Your services that interact with each other should appear under the Related Services section in the Komodor service page.","title":"Confirmation"},{"location":"Integrations/Grafana.html","text":"Grafana Integration \u00b6 Grafana Integration adds Grafana Alerts events to your service on Komodor. Installation \u00b6 Prerequisites \u00b6 A running instance of Grafana. Installation Steps \u00b6 Make sure the prerequisites above are met. Locate the Grafana installation tile on Komodor Integration Settings . Press Install Integration . A dialog will open. Go to your Grafana instance. In the Grafana side bar, hover your cursor over the Alerting (bell) icon and then click Notification channels . Press New channel . In the Name field, enter a name for the channel. In the Type field, choose webhook . Copy the webhook URL to the Url field. Open the Notifications settings . Check the Default option. When selected, this option sends a notification on this channel for all alert rules. Press Save Press Install Grafana Installation Confirmation \u00b6 A Grafana Integration tile will be added to the top section of labeled Installed Integrations . When a Grafana alert is triggered it will be added to the relevant service on Komodor.","title":"Grafana"},{"location":"Integrations/Grafana.html#grafana-integration","text":"Grafana Integration adds Grafana Alerts events to your service on Komodor.","title":"Grafana Integration"},{"location":"Integrations/Grafana.html#installation","text":"","title":"Installation"},{"location":"Integrations/Grafana.html#prerequisites","text":"A running instance of Grafana.","title":"Prerequisites"},{"location":"Integrations/Grafana.html#installation-steps","text":"Make sure the prerequisites above are met. Locate the Grafana installation tile on Komodor Integration Settings . Press Install Integration . A dialog will open. Go to your Grafana instance. In the Grafana side bar, hover your cursor over the Alerting (bell) icon and then click Notification channels . Press New channel . In the Name field, enter a name for the channel. In the Type field, choose webhook . Copy the webhook URL to the Url field. Open the Notifications settings . Check the Default option. When selected, this option sends a notification on this channel for all alert rules. Press Save Press Install Grafana Installation","title":"Installation Steps"},{"location":"Integrations/Grafana.html#confirmation","text":"A Grafana Integration tile will be added to the top section of labeled Installed Integrations . When a Grafana alert is triggered it will be added to the relevant service on Komodor.","title":"Confirmation"},{"location":"Integrations/LaunchDarkly.html","text":"LaunchDarkly Integration \u00b6 Integration with LaunchDarkly extends the holistic view of the environment with flags changes. For example: * Feature flag was turned on * Feature flag invariation changed * Feature flag targeting was changed Installation \u00b6 In order to create that integration all you need is to use navigate to LaunchDarkly Webhook Integration and fill the form: 1. Name - give your integration a name 2. URL - Please contact us to provide you the URL (we also will provide you a secret to sign the webhooks payload) 3. Sign Webhook - use the secret from Komodor 4. Add policy 1. You can use proj/*:env/*:flag/* statement to tell LaunchDarkly to send to Komodor all the changes for all your flags across all your environments. You may use the \"Resource finder\" to customize it for your needs. 2. Set the effect to \"Allow\" 3. Choose all actions","title":"LaunchDarkly"},{"location":"Integrations/LaunchDarkly.html#launchdarkly-integration","text":"Integration with LaunchDarkly extends the holistic view of the environment with flags changes. For example: * Feature flag was turned on * Feature flag invariation changed * Feature flag targeting was changed","title":"LaunchDarkly Integration"},{"location":"Integrations/LaunchDarkly.html#installation","text":"In order to create that integration all you need is to use navigate to LaunchDarkly Webhook Integration and fill the form: 1. Name - give your integration a name 2. URL - Please contact us to provide you the URL (we also will provide you a secret to sign the webhooks payload) 3. Sign Webhook - use the secret from Komodor 4. Add policy 1. You can use proj/*:env/*:flag/* statement to tell LaunchDarkly to send to Komodor all the changes for all your flags across all your environments. You may use the \"Resource finder\" to customize it for your needs. 2. Set the effect to \"Allow\" 3. Choose all actions","title":"Installation"},{"location":"Integrations/PagerDuty.html","text":"PagerDuty Integration \u00b6 PagerDuty Integration adds PagerDuty Incident events to your service events. NOTE: Currently we support PD events that originate on Datadog. Installation \u00b6 Prerequisites \u00b6 In order for us to connect your Datadog-PD incidents to your services on Komodor, we need to find a match between environment variables found on the Datadog service and your service on K8s. Please make sure the following environment variables exist on your K8s deployment: - DD_ENV should match the environment specified on the Datadog service - DD_SERVICE should match the service name specified on the Datadog service Installation Steps \u00b6 Make sure the prerequisites above are met. Locate the PagerDuty installation tile on Komodor Integration Settings . Press Install . At this point you should be redirected to Pagerduty and back to Komodor successfully. Confirmation \u00b6 A PagerDuty Integration tile will be added to the top section of labeled Installed Integrations . When an issue from Datadog is raised through PD, you will be able to find it in the appropriate Komodor service page.","title":"PagerDuty"},{"location":"Integrations/PagerDuty.html#pagerduty-integration","text":"PagerDuty Integration adds PagerDuty Incident events to your service events. NOTE: Currently we support PD events that originate on Datadog.","title":"PagerDuty Integration"},{"location":"Integrations/PagerDuty.html#installation","text":"","title":"Installation"},{"location":"Integrations/PagerDuty.html#prerequisites","text":"In order for us to connect your Datadog-PD incidents to your services on Komodor, we need to find a match between environment variables found on the Datadog service and your service on K8s. Please make sure the following environment variables exist on your K8s deployment: - DD_ENV should match the environment specified on the Datadog service - DD_SERVICE should match the service name specified on the Datadog service","title":"Prerequisites"},{"location":"Integrations/PagerDuty.html#installation-steps","text":"Make sure the prerequisites above are met. Locate the PagerDuty installation tile on Komodor Integration Settings . Press Install . At this point you should be redirected to Pagerduty and back to Komodor successfully.","title":"Installation Steps"},{"location":"Integrations/PagerDuty.html#confirmation","text":"A PagerDuty Integration tile will be added to the top section of labeled Installed Integrations . When an issue from Datadog is raised through PD, you will be able to find it in the appropriate Komodor service page.","title":"Confirmation"},{"location":"Integrations/Sentry.html","text":"Sentry Integration \u00b6 The Sentry <> Komodor integration allows you to see sentry issues in Komodor. For each service, Komodor automatically maps the relevant Sentry project to Komodor service and allows you to gain a full-service timeline: both relevant changes (deploys, config changes etc\u2019) and issues from Sentry all in one place. Installation \u00b6 Installation Steps \u00b6 Make sure the services you track on Komodor use the SENTRY_DSN environment variable. Locate the Sentry installation tile on Komodor Integration Settings . Click Install . A dialog will open with a webhook URL and a link to Sentry to define an internal integration. Go to your Sentry account and click on settings in the left menu. Click on Developer Settings in the settings menu: Click on + New Internal Integration Name this integration Komodor. Paste the webhook URL in the webhook field: To operate properly Komodor needs these permissions: Project - Read Issue & Event - Read Check the issue webhook checkbox Save changes As soon as you save you will see your \u201cclient secret\u201d. Copy the value: Go back to your Komodor integrations page and paste the value of your client secret to the client secret text box. Click Install In your deployment.yaml \u00b6 We use the value of the environment variable SENTRY_DSN to match Sentry Issue events with your service on Komodor. Please make sure your K8s deployment has the environment variable SENTRY_DSN . Confirmation \u00b6 A Sentry Integration tile will be added to the top section of labeled Installed Integrations . When everything is ready you\u2019re going to be able to see Sentry events in you service view:","title":"Sentry"},{"location":"Integrations/Sentry.html#sentry-integration","text":"The Sentry <> Komodor integration allows you to see sentry issues in Komodor. For each service, Komodor automatically maps the relevant Sentry project to Komodor service and allows you to gain a full-service timeline: both relevant changes (deploys, config changes etc\u2019) and issues from Sentry all in one place.","title":"Sentry Integration"},{"location":"Integrations/Sentry.html#installation","text":"","title":"Installation"},{"location":"Integrations/Sentry.html#installation-steps","text":"Make sure the services you track on Komodor use the SENTRY_DSN environment variable. Locate the Sentry installation tile on Komodor Integration Settings . Click Install . A dialog will open with a webhook URL and a link to Sentry to define an internal integration. Go to your Sentry account and click on settings in the left menu. Click on Developer Settings in the settings menu: Click on + New Internal Integration Name this integration Komodor. Paste the webhook URL in the webhook field: To operate properly Komodor needs these permissions: Project - Read Issue & Event - Read Check the issue webhook checkbox Save changes As soon as you save you will see your \u201cclient secret\u201d. Copy the value: Go back to your Komodor integrations page and paste the value of your client secret to the client secret text box. Click Install","title":"Installation Steps"},{"location":"Integrations/Sentry.html#in-your-deploymentyaml","text":"We use the value of the environment variable SENTRY_DSN to match Sentry Issue events with your service on Komodor. Please make sure your K8s deployment has the environment variable SENTRY_DSN .","title":"In your deployment.yaml"},{"location":"Integrations/Sentry.html#confirmation","text":"A Sentry Integration tile will be added to the top section of labeled Installed Integrations . When everything is ready you\u2019re going to be able to see Sentry events in you service view:","title":"Confirmation"},{"location":"Integrations/datadog-webhook.html","text":"Datadog Webhook Integration \u00b6 Komodor-Datadog webhook integration allows Komodor to receive alerts from Datadog Monitors. You will see all alerts in the Komodor Service View. Installation \u00b6 Prerequisites \u00b6 In order for us to connect your services according to Datadog events, the following environment variables should exist on your k8s deployments: - DD_ENV should match the environment specified on the Datadog tags - DD_SERVICE should match the service name specified on the Datadog tags Installation Steps \u00b6 Make sure the prerequisites above are met. Locate the Datadog installation tile on Komodor Integration Settings . Press Install . Follow instructions on the screen. Confirmation \u00b6 A Datadog Integration tile will be added to the top section of labeled Installed Integrations . Configuring the webhook in Datadog \u00b6 Go to Datadog Webhook Integration Setup Create a + New Webhook Call the webhook komodor Enter the webhook server URL in the URL field: https://app.komodor.com/collector/datadog/webhook Copy the following Payload schema into the Payload field: { \"body\" : \"$EVENT_MSG\" , \"last_updated\" : \"$LAST_UPDATED\" , \"event_type\" : \"$EVENT_TYPE\" , \"title\" : \"$EVENT_TITLE\" , \"date\" : \"$DATE\" , \"org\" : { \"id\" : \"$ORG_ID\" , \"name\" : \"$ORG_NAME\" }, \"id\" : \"$ID\" , \"tags\" : \"$TAGS\" , \"alert\" : { \"id\" : \"$ALERT_ID\" , \"type\" : \"$ALERT_TYPE\" , \"transition\" : \"$ALERT_TRANSITION\" , \"cycleId\" : \"$ALERT_CYCLE_KEY\" , \"priority\" : \"$PRIORITY\" , \"status\" : \"$ALERT_STATUS\" , \"scope\" : \"$ALERT_SCOPE\" , \"query\" : \"$ALERT_QUERY\" , \"metric\" : \"$ALERT_METRIC\" , \"metric_namespace\" : \"$METRIC_NAMESPACE\" }, \"aggregation_key\" : \"$AGGREG_KEY\" , \"link\" : \"$LINK\" , \"snapshot\" : \"$SNAPSHOT\" , \"user\" : \"$USER\" , \"username\" : \"$USERNAME\" , \"email\" : \"$EMAIL\" } Add a Custom Header X-API-KEY with the Api Key found in the Komodor Integration page from the Datadog integration tile at the bottom of the setup modal in a JSON format. { \"X-API-KEY\" : \"YOUR_KOMODOR_API_KEY\" } Save your changes For every monitor you wish to receive alerts to Komodor. Edit the monitor and add @webhook-komodor at the end of the Monitor message.","title":"Datadog Webhook"},{"location":"Integrations/datadog-webhook.html#datadog-webhook-integration","text":"Komodor-Datadog webhook integration allows Komodor to receive alerts from Datadog Monitors. You will see all alerts in the Komodor Service View.","title":"Datadog Webhook Integration"},{"location":"Integrations/datadog-webhook.html#installation","text":"","title":"Installation"},{"location":"Integrations/datadog-webhook.html#prerequisites","text":"In order for us to connect your services according to Datadog events, the following environment variables should exist on your k8s deployments: - DD_ENV should match the environment specified on the Datadog tags - DD_SERVICE should match the service name specified on the Datadog tags","title":"Prerequisites"},{"location":"Integrations/datadog-webhook.html#installation-steps","text":"Make sure the prerequisites above are met. Locate the Datadog installation tile on Komodor Integration Settings . Press Install . Follow instructions on the screen.","title":"Installation Steps"},{"location":"Integrations/datadog-webhook.html#confirmation","text":"A Datadog Integration tile will be added to the top section of labeled Installed Integrations .","title":"Confirmation"},{"location":"Integrations/datadog-webhook.html#configuring-the-webhook-in-datadog","text":"Go to Datadog Webhook Integration Setup Create a + New Webhook Call the webhook komodor Enter the webhook server URL in the URL field: https://app.komodor.com/collector/datadog/webhook Copy the following Payload schema into the Payload field: { \"body\" : \"$EVENT_MSG\" , \"last_updated\" : \"$LAST_UPDATED\" , \"event_type\" : \"$EVENT_TYPE\" , \"title\" : \"$EVENT_TITLE\" , \"date\" : \"$DATE\" , \"org\" : { \"id\" : \"$ORG_ID\" , \"name\" : \"$ORG_NAME\" }, \"id\" : \"$ID\" , \"tags\" : \"$TAGS\" , \"alert\" : { \"id\" : \"$ALERT_ID\" , \"type\" : \"$ALERT_TYPE\" , \"transition\" : \"$ALERT_TRANSITION\" , \"cycleId\" : \"$ALERT_CYCLE_KEY\" , \"priority\" : \"$PRIORITY\" , \"status\" : \"$ALERT_STATUS\" , \"scope\" : \"$ALERT_SCOPE\" , \"query\" : \"$ALERT_QUERY\" , \"metric\" : \"$ALERT_METRIC\" , \"metric_namespace\" : \"$METRIC_NAMESPACE\" }, \"aggregation_key\" : \"$AGGREG_KEY\" , \"link\" : \"$LINK\" , \"snapshot\" : \"$SNAPSHOT\" , \"user\" : \"$USER\" , \"username\" : \"$USERNAME\" , \"email\" : \"$EMAIL\" } Add a Custom Header X-API-KEY with the Api Key found in the Komodor Integration page from the Datadog integration tile at the bottom of the setup modal in a JSON format. { \"X-API-KEY\" : \"YOUR_KOMODOR_API_KEY\" } Save your changes For every monitor you wish to receive alerts to Komodor. Edit the monitor and add @webhook-komodor at the end of the Monitor message.","title":"Configuring the webhook in Datadog"}]}